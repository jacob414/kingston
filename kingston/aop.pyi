from kingston.decl import box as box
from typing import Any, Callable, Collection, Mapping, Optional

class AspectNotFound(Exception): ...

def raise_for(params: Collection, opts: Mapping) -> None: ...

class Aspects(dict):
    def checkpoint(point: Collection, params: Collection, opts: Mapping) -> Optional[Collection]: ...
    def search(self, params: Collection, opts: Mapping) -> Any: ...
    def invoke(self, *params: Any, **opts: Any) -> Any: ...
    def decorate(self, params: Collection, opts: Mapping) -> Any: ...
    def __call__(self, *params: Any, **opts: Any) -> Callable: ...
