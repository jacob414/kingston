from collections.abc import Iterable
from typing import Any, Callable, Collection, Union

class PipingExperiment:
    result: Any = ...
    def __init__(self, seed: Any) -> PipingExperiment: ...
    def __or__(self, step: Callable) -> PipingExperiment: ...
P = PipingExperiment
IT: Any
itrt = Iterable
NarrowingPredicate = Union[Any, Callable[[Any], bool]]

class Narrowable:
    def narrow(self, pred: NarrowingPredicate) -> Narrowable: ...
    def __getitem__(self, idx: Any) -> Any: ...

def narrowable(src: Union[Any, Collection]) -> Narrowable: ...
